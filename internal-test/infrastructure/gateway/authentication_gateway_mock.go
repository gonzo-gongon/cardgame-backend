// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/gateway/authentication_gateway.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/gateway/authentication_gateway.go -destination=internal-test/infrastructure/gateway/authentication_gateway_mock.go -package=gateway
//

// Package gateway is a generated GoMock package.
package gateway

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthenticationGateway is a mock of AuthenticationGateway interface.
type MockAuthenticationGateway struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationGatewayMockRecorder
	isgomock struct{}
}

// MockAuthenticationGatewayMockRecorder is the mock recorder for MockAuthenticationGateway.
type MockAuthenticationGatewayMockRecorder struct {
	mock *MockAuthenticationGateway
}

// NewMockAuthenticationGateway creates a new mock instance.
func NewMockAuthenticationGateway(ctrl *gomock.Controller) *MockAuthenticationGateway {
	mock := &MockAuthenticationGateway{ctrl: ctrl}
	mock.recorder = &MockAuthenticationGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationGateway) EXPECT() *MockAuthenticationGatewayMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockAuthenticationGateway) Generate(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockAuthenticationGatewayMockRecorder) Generate(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockAuthenticationGateway)(nil).Generate), userID)
}

// GetIssuedAt mocks base method.
func (m *MockAuthenticationGateway) GetIssuedAt(tokenString string) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuedAt", tokenString)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuedAt indicates an expected call of GetIssuedAt.
func (mr *MockAuthenticationGatewayMockRecorder) GetIssuedAt(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuedAt", reflect.TypeOf((*MockAuthenticationGateway)(nil).GetIssuedAt), tokenString)
}

// GetUserID mocks base method.
func (m *MockAuthenticationGateway) GetUserID(tokenString string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", tokenString)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockAuthenticationGatewayMockRecorder) GetUserID(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockAuthenticationGateway)(nil).GetUserID), tokenString)
}

// GetUserIDBypassTokenExpiry mocks base method.
func (m *MockAuthenticationGateway) GetUserIDBypassTokenExpiry(tokenString string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDBypassTokenExpiry", tokenString)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDBypassTokenExpiry indicates an expected call of GetUserIDBypassTokenExpiry.
func (mr *MockAuthenticationGatewayMockRecorder) GetUserIDBypassTokenExpiry(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDBypassTokenExpiry", reflect.TypeOf((*MockAuthenticationGateway)(nil).GetUserIDBypassTokenExpiry), tokenString)
}
