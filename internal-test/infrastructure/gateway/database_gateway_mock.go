// Code generated by MockGen. DO NOT EDIT.
// Source: /usr/local/go/src/backend/internal/infrastructure/gateway/database_gateway.go
//
// Generated by this command:
//
//	mockgen -source=/usr/local/go/src/backend/internal/infrastructure/gateway/database_gateway.go -destination=/usr/local/go/src/backend/internal-test/infrastructure/gateway/database_gateway_mock.go -package=gateway
//

// Package gateway is a generated GoMock package.
package gateway

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockDatabaseGateway is a mock of DatabaseGateway interface.
type MockDatabaseGateway struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseGatewayMockRecorder
	isgomock struct{}
}

// MockDatabaseGatewayMockRecorder is the mock recorder for MockDatabaseGateway.
type MockDatabaseGatewayMockRecorder struct {
	mock *MockDatabaseGateway
}

// NewMockDatabaseGateway creates a new mock instance.
func NewMockDatabaseGateway(ctrl *gomock.Controller) *MockDatabaseGateway {
	mock := &MockDatabaseGateway{ctrl: ctrl}
	mock.recorder = &MockDatabaseGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseGateway) EXPECT() *MockDatabaseGatewayMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockDatabaseGateway) Connect() (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockDatabaseGatewayMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDatabaseGateway)(nil).Connect))
}
