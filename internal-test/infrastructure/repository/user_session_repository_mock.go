// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/repository/user_session_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/repository/user_session_repository.go -destination=internal-test/infrastructure/repository/user_session_repository_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockUserSessionRepository is a mock of UserSessionRepository interface.
type MockUserSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserSessionRepositoryMockRecorder
	isgomock struct{}
}

// MockUserSessionRepositoryMockRecorder is the mock recorder for MockUserSessionRepository.
type MockUserSessionRepositoryMockRecorder struct {
	mock *MockUserSessionRepository
}

// NewMockUserSessionRepository creates a new mock instance.
func NewMockUserSessionRepository(ctrl *gomock.Controller) *MockUserSessionRepository {
	mock := &MockUserSessionRepository{ctrl: ctrl}
	mock.recorder = &MockUserSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSessionRepository) EXPECT() *MockUserSessionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserSessionRepository) Create(userID string, createdAt *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, createdAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserSessionRepositoryMockRecorder) Create(userID, createdAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserSessionRepository)(nil).Create), userID, createdAt)
}

// GetUpdatedAt mocks base method.
func (m *MockUserSessionRepository) GetUpdatedAt(userID string) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatedAt", userID)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdatedAt indicates an expected call of GetUpdatedAt.
func (mr *MockUserSessionRepositoryMockRecorder) GetUpdatedAt(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatedAt", reflect.TypeOf((*MockUserSessionRepository)(nil).GetUpdatedAt), userID)
}

// Update mocks base method.
func (m *MockUserSessionRepository) Update(userID string, updatedAt *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userID, updatedAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserSessionRepositoryMockRecorder) Update(userID, updatedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserSessionRepository)(nil).Update), userID, updatedAt)
}
