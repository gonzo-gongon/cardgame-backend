// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/repository/authentication_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/repository/authentication_repository.go -destination=internal-test/infrastructure/repository/authentication_repository_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	model "original-card-game-backend/internal/domain/model"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthenticationRepository is a mock of AuthenticationRepository interface.
type MockAuthenticationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationRepositoryMockRecorder
	isgomock struct{}
}

// MockAuthenticationRepositoryMockRecorder is the mock recorder for MockAuthenticationRepository.
type MockAuthenticationRepositoryMockRecorder struct {
	mock *MockAuthenticationRepository
}

// NewMockAuthenticationRepository creates a new mock instance.
func NewMockAuthenticationRepository(ctrl *gomock.Controller) *MockAuthenticationRepository {
	mock := &MockAuthenticationRepository{ctrl: ctrl}
	mock.recorder = &MockAuthenticationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationRepository) EXPECT() *MockAuthenticationRepositoryMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockAuthenticationRepository) Generate(userID model.UUID[model.User]) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockAuthenticationRepositoryMockRecorder) Generate(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockAuthenticationRepository)(nil).Generate), userID)
}

// GetIssuedAt mocks base method.
func (m *MockAuthenticationRepository) GetIssuedAt(tokenString string) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuedAt", tokenString)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuedAt indicates an expected call of GetIssuedAt.
func (mr *MockAuthenticationRepositoryMockRecorder) GetIssuedAt(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuedAt", reflect.TypeOf((*MockAuthenticationRepository)(nil).GetIssuedAt), tokenString)
}

// GetUserID mocks base method.
func (m *MockAuthenticationRepository) GetUserID(tokenString string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", tokenString)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockAuthenticationRepositoryMockRecorder) GetUserID(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockAuthenticationRepository)(nil).GetUserID), tokenString)
}

// GetUserIDBypassTokenExpiry mocks base method.
func (m *MockAuthenticationRepository) GetUserIDBypassTokenExpiry(tokenString string) (*model.UUID[model.User], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDBypassTokenExpiry", tokenString)
	ret0, _ := ret[0].(*model.UUID[model.User])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDBypassTokenExpiry indicates an expected call of GetUserIDBypassTokenExpiry.
func (mr *MockAuthenticationRepositoryMockRecorder) GetUserIDBypassTokenExpiry(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDBypassTokenExpiry", reflect.TypeOf((*MockAuthenticationRepository)(nil).GetUserIDBypassTokenExpiry), tokenString)
}
