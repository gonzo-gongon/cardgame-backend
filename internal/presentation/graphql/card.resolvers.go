package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"original-card-game-backend/internal/domain/model"
	"original-card-game-backend/internal/presentation/graphql/directive"
	"original-card-game-backend/internal/presentation/graphql/generated"
)

// CreateCard is the resolver for the createCard field.
func (r *mutationResolver) CreateCard(ctx context.Context, input generated.CreateCardInput) (*generated.Card, error) {
	user, err := directive.GetUserFromContext(ctx)

	if err != nil {
		return nil, err
	}

	ret, err := r.cardUsecase.CreateCard(
		model.CreateCard{
			Name: input.Name,
			Text: input.Text,
		},
		user,
	)

	if err != nil {
		panic(err)
	}

	return &generated.Card{
		ID:   ret.ID.String(),
		Name: ret.Name,
		Text: ret.Text,
	}, nil
}

// Cards is the resolver for the cards field.
func (r *queryResolver) Cards(ctx context.Context, ids []string) ([]*generated.Card, error) {
	cards, err := r.cardUsecase.GetCards(model.UUIDsFromString[model.Card](ids))

	if err != nil {
		panic(err)
	}

	ret := make([]*generated.Card, len(cards))

	for i, v := range cards {
		ret[i] = &generated.Card{
			ID:   string(v.ID),
			Name: v.Name,
			Text: v.Text,
		}
	}

	return ret, nil
}
